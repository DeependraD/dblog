<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doe on Rookie site</title>
    <link>http://localhost:4321/categories/doe/</link>
    <description>Recent content in Doe on Rookie site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Sep 2020 12:13:33 +0545</lastBuildDate>
    <atom:link href="http://localhost:4321/categories/doe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Serpentine design and sorting</title>
      <link>http://localhost:4321/blog/serpentine-design-and-sorting/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:4321/blog/serpentine-design-and-sorting/</guid>
      <description>&lt;h1 id=&#34;take-a-grid-and-serpentine-it-row-wise-or-column-wise&#34;&gt;Take a grid and serpentine it row-wise or column-wise&#xA;  &lt;a href=&#34;#take-a-grid-and-serpentine-it-row-wise-or-column-wise&#34;&gt;&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This fn joins two matrices alternately columnwise, which is why this is the source of inspiration for generating serpentine design.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alternate.cols &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;function&lt;/span&gt;(m1, m2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;cbind&lt;/span&gt;(m1, m2)[, &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;order&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(m1)), &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(m2))))]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A custom function to create a serpentine design in whatever fashion specified:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;serpentine &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;function&lt;/span&gt;(x, columnwise&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;TRUE&lt;/span&gt;){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (columnwise) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    odd &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; x[, &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, by&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, length.out &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;)] &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# odd x&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rev_even &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; x[, &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(from &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        by&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        length.out &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ifelse&lt;/span&gt;((&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;%%&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             ((&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#099&#34;&gt;-1&lt;/span&gt;), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             (&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;))))]&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;[seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;dim&lt;/span&gt;(x)[1],&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;),] &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# or, even[rev(1:nrow(x)),] # reversed even x&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alternate_cbind &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;cbind&lt;/span&gt;(odd, rev_even)[, &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;order&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(odd)), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                       &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ncol&lt;/span&gt;(rev_even))))]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;(alternate_cbind)}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    odd &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;[seq&lt;/span&gt;(&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;, by&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, length.out &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;),] &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# odd x&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rev_even &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;[seq&lt;/span&gt;(from &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, by&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;, length.out &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ifelse&lt;/span&gt;((&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;%%&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           ((&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#099&#34;&gt;-1&lt;/span&gt;), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                           (&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(x)&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt;)))), ][, &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;dim&lt;/span&gt;(x)[2],&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;)] &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# or, even[, rev(1:ncol(x))] # reversed even x&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alternate_rbind &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;rbind&lt;/span&gt;(odd, rev_even)&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;[order&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(odd)), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                     &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seq&lt;/span&gt;(&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;nrow&lt;/span&gt;(rev_even)))), ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;(alternate_rbind)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see the function in action&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
